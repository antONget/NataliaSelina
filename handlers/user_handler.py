from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, StateFilter, or_f
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from keyboards import user_keyboards as kb
from filter.admin_filter import IsSuperAdmin
from config_data.config import Config, load_config
from database import requests as rq
from filter.filter import validate_russian_phone_number
from services.payments import create_payment, check_payment
from handlers.hadler_calendar import set_calendar

import re
import logging
import random
import asyncio
router = Router()
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()


class User(StatesGroup):
    fullname = State()
    phone = State()
    content = State()


@router.message(CommandStart())
async def process_start_command_user(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –µ—Å–ª–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /start
     –∏–ª–∏ –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /user
    1. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –Ω–µ–π
    :param message:
    :param state:
    :return:
    """
    logging.info(f'process_start_command_user: {message.chat.id}')
    # await set_calendar(message=message, state=state)
    # return
    await state.set_state(state=None)
    await rq.add_user(tg_id=message.chat.id,
                      data={"tg_id": message.chat.id, "username": message.from_user.username})
    await message.answer(text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                         reply_markup=kb.keyboard_main_menu())
    await message.answer(text=f'–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ù–∞—Ç–∞–ª—å–∏ –°–µ–ª–∏–Ω–æ–π üå±\n\n'
                              f'–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è,'
                              f' –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è, –∏–ª–∏ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–π—Ç–∏ –≤ –õ–ö –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚§µ',
                         reply_markup=kb.keyboard_start_menu())


@router.callback_query(F.data == 'support')
async def process_question(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    :param message:
    :return:
    """
    logging.info(f'process_question: {message.chat.id}')
    await message.answer(text=f'–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è,'
                              f' —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å {config.tg_bot.support_username}')


@router.callback_query(F.data == 'select_product')
async def process_select_product(callback: CallbackQuery) -> None:
    """
    –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É
    :param callback:
    :return:
    """
    logging.info(f'process_question: {callback.message.chat.id}')
    await callback.message.edit_text(text=f'üë• –ì–†–£–ü–ü–û–í–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê: —á–µ–∫–∞–ø, –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞, —É–ª—É—á—à–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è'
                                          f' –∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏.\n\n'
                                          f'‚Ä∫ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –í–∏–∫—Ç–æ—Ä–∏–∏.\n'
                                          f'‚Ä∫ –ö–æ–Ω—Ç—Ä–æ–ª—å –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞\n'
                                          f'‚Ä∫ –ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º.\n'
                                          f'‚Ä∫ –î–æ–º–∞—à–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n'
                                          f'*lite: —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, –±–µ–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –í–∏–∫—Ç–æ—Ä–∏–∏\n\n'
                                          f'üë§ –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ï –í–ï–î–ï–ù–ò–ï: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã/–∑–∞–ø—Ä–æ—Å—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é,'
                                          f' –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –µ—ë –≤–µ–¥–µ–Ω–∏–µ.\n\n'
                                          f'‚Ä∫ –í–∏–¥–µ–æ-–≤—Å—Ç—Ä–µ—á–∞ —Å –í–∏–∫—Ç–æ—Ä–∏–µ–π.\n'
                                          f'‚Ä∫ –ú–µ—Å—è—Ü —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –≤ —á–∞—Ç–µ —Å –í–∏–∫—Ç–æ—Ä–∏–µ–π.\n'
                                          f'‚Ä∫ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞\n'
                                          f'‚Ä∫ pro–ü–û–†–¶–ò–Ø\n'
                                          f'‚Ä∫ –ú–µ—Ç–æ–¥–∏—á–∫–∏-–∞–ø—Ç–µ—á–∫–∏\n\n'
                                          f'üìù –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã/–∑–∞–ø—Ä–æ—Å—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é,'
                                          f' –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –µ—ë –≤–µ–¥–µ–Ω–∏–µ.\n'
                                          f'‚Ä∫ –í–∏–¥–µ–æ-–≤—Å—Ç—Ä–µ—á–∞ —Å –í–∏–∫—Ç–æ—Ä–∏–µ–π.\n'
                                          f'‚Ä∫ –ú–µ—Å—è—Ü —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –≤ —á–∞—Ç–µ —Å –í–∏–∫—Ç–æ—Ä–∏–µ–π.\n'
                                          f'‚Ä∫ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞\n'
                                          f'‚Ä∫ pro–ü–û–†–¶–ò–Ø\n'
                                          f'‚Ä∫ –ú–µ—Ç–æ–¥–∏—á–∫–∏-–∞–ø—Ç–µ—á–∫–∏',
                                     reply_markup=kb.keyboard_main_menu())


@router.message(F.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def process_press_main_menu(message: Message, state: FSMContext):
    """
    –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    :param message:
    :param state:
    :return:
    """
    logging.info(f'process_press_main_menu {message.chat.id}')
    await process_start_command_user(message=message, state=state)


@router.callback_query(F.data.endswith('product'))
async def process_product_one_step(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–µ—Ä–≤—ã–π —à–∞–≥ –≤ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_product_one_step {callback.message.chat.id}')
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    product = callback.data.split('_')[0]
    await state.update_data(product=product)
    if product == 'consultation':
        await callback.message.answer_photo(
            photo='AgACAgIAAxkBAAMhZu_WbD9IYueoX0PynH9dM5c8f1gAAtnmMRuCboBLtu9WsVsODsYBAAMCAAN4AAM2BA',
            caption=f'–ó–¥–µ—Å—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º:\n'
                    f'–≠–∫—Å–ø—Ä–µ—Å—Å -–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è -5000 —Ä—É–±–ª–µ–π \n'
                    f'–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —Ä–∞–∑–±–æ—Ä–æ–º –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π -12500\n'
                    f' (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)',
            reply_markup=kb.keyboard_consultation())
    elif product == 'wellness':
        await callback.message.answer_photo(
            photo='AgACAgIAAxkBAAMkZu_YC4xAd5STB5P7OwnQjLGFH4cAAvLmMRuCboBL-PiUkB7vfHcBAAMCAAN4AAM2BA',
            caption=f'–ó–¥–µ—Å—å –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º:\n'
                    f'–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ 3 –º–µ—Å—è—Ü–∞\n'
                    f'–í–ò–ü-–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é\n'
                    f'–í–µ–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –æ–Ω–ª–∞–π–Ω-–¥–µ—Ç–æ–∫—Å\n'
                    f' (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)',
            reply_markup=kb.keyboard_wellness())
    elif product == 'weightloss':
        await callback.message.answer_photo(
            photo='AgACAgIAAxkBAAMmZu_Yp37bKoJVfEzvmDJBWoi1NXkAAvTmMRuCboBLi4uieFXeNxEBAAMCAAN5AAM2BA',
            caption=f'–ó–¥–µ—Å—å –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º:\n'
                    f'–í–µ–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –æ–Ω–ª–∞–π–Ω-–¥–µ—Ç–æ–∫—Å\n'
                    f'–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ—Ö—É–¥–µ–Ω–∏—è –Ω–∞ 3 –º–µ—Å—è—Ü–∞\n'
                    f'–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ—Ö—É–¥–µ–Ω–∏—è –Ω–∞ 1 –º–µ—Å—è—Ü \n'
                    f' (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)',
            reply_markup=kb.keyboard_weightloss())
    else:
        await state.update_data(item='8')
        await callback.message.answer_photo(
            photo='AgACAgIAAxkBAAMoZu_ZPiqf6fdyll5iDjZNYy69FqoAA-cxG4JugEsZLb0xMqq4iQEAAwIAA3gAAzYE',
            caption=f'–ó–¥–µ—Å—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:\n'
                    f'–ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ –≤—Ä–∞—á–µ–π -300000 —Ä—É–±–ª–µ–π\n'
                    f' (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)',
            reply_markup=kb.keyboard_sign_up())
    await callback.answer()


@router.callback_query(F.data.startswith('item_'))
async def process_sign_up(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –í—ã–≤–æ–¥–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
    :param callback:
    :return:
    """
    logging.info(f'process_sign_up {callback.message.chat.id}')
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    item = callback.data.split("_")[-1]
    await state.update_data(item=item)
    await callback.message.answer(text=f'–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞',
                                  reply_markup=kb.keyboard_sign_up())
    await callback.answer()


@router.callback_query(F.data == 'sign_up')
async def process_sign_up(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.update_data(agreement='no')
    data = await state.get_data()
    if data['item'] == '8':
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
        await callback.message.answer(
            text=f'‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫–∞ –∑–∞—â–∏—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö <a href="">—Å—Å—ã–ª–∫–∞</a>\n'
                 f'‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö <a href="">—Å—Å—ã–ª–∫–∞</a>\n'
                 f'‚Ä¢ –û—Ñ–µ—Ä—Ç–∞ <a href="">—Å—Å—ã–ª–∫–∞</a>\n'
                 f'‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ –æ—Ñ–µ—Ä—Ç–µ <a href="">—Å—Å—ã–ª–∫–∞</a>\n\n'
                 f'‚úÖ –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ‚Äú—Å–æ–≥–ª–∞—à–∞—é—Å—å‚Äù, –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö'
                 f' –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –æ—Ñ–µ—Ä—Ç—ã –∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∑–∞—â–∏—Ç—ã'
                 f' –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
            reply_markup=kb.keyboard_user_agreement())
    else:
        await callback.message.edit_text(text=f'‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫–∞ –∑–∞—â–∏—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö <a href="">—Å—Å—ã–ª–∫–∞</a>\n'
                                           f'‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö <a href="">—Å—Å—ã–ª–∫–∞</a>\n'
                                           f'‚Ä¢ –û—Ñ–µ—Ä—Ç–∞ <a href="">—Å—Å—ã–ª–∫–∞</a>\n'
                                           f'‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ –æ—Ñ–µ—Ä—Ç–µ <a href="">—Å—Å—ã–ª–∫–∞</a>\n\n'
                                           f'‚úÖ –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ‚Äú—Å–æ–≥–ª–∞—à–∞—é—Å—å‚Äù, –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö'
                                           f' –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –æ—Ñ–µ—Ä—Ç—ã –∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∑–∞—â–∏—Ç—ã'
                                           f' –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
                                      reply_markup=kb.keyboard_user_agreement())
    await callback.answer()


@router.callback_query(F.data == 'agreement')
async def process_user_agreement(callback: CallbackQuery, state: FSMContext):
    """
    –°–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º
    :param message:
    :return:
    """
    logging.info(f'process_user_agreement {callback.message.chat.id}')
    await state.update_data(agreement='yes')
    await callback.message.edit_text(text=f'‚Ä¢ –ü–æ–ª–∏—Ç–∏–∫–∞ –∑–∞—â–∏—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö <a href="">—Å—Å—ã–ª–∫–∞</a>\n'
                              f'‚Ä¢ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö <a href="">—Å—Å—ã–ª–∫–∞</a>\n'
                              f'‚Ä¢ –û—Ñ–µ—Ä—Ç–∞ <a href="">—Å—Å—ã–ª–∫–∞</a>\n'
                              f'‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ –æ—Ñ–µ—Ä—Ç–µ <a href="">—Å—Å—ã–ª–∫–∞</a>\n\n'
                              f'‚úÖ –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ‚Äú—Å–æ–≥–ª–∞—à–∞—é—Å—å‚Äù, –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö'
                              f' –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –æ—Ñ–µ—Ä—Ç—ã –∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∑–∞—â–∏—Ç—ã'
                              f' –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
                         reply_markup=kb.keyboard_user_agreement_update())


@router.callback_query(F.data == 'continue')
async def process_continue(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_continue {callback.message.chat.id}')
    data = await state.get_data()
    if data['agreement'] == 'no':
        await callback.answer(text='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –í–∞–º –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ'
                                   ' —Å–æ–≥–ª–∞—à–µ–Ω–∏—è', show_alert=True)
        return
    await callback.message.edit_text(text=f'–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ (–ø–æ–ª–Ω–æ—Å—Ç—å—é)',
                                     reply_markup=None)
    await state.set_state(User.fullname)
    await callback.answer()


@router.message(F.text, StateFilter(User.fullname))
async def process_get_fullname(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º –§–ò–û
    :param message:
    :param state:
    :return:
    """
    logging.info(f'process_get_fullname {message.chat.id}')
    name_pattern = re.compile(r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$')
    if name_pattern.match(message.text):
        await state.update_data(fullname=message.text)
        await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –≤–Ω–∏–∑—É üëá\n'
                                  '"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è"',
                             reply_markup=kb.keyboards_get_contact())
        await state.set_state(User.phone)
    else:
        await message.answer(text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û. –§–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)')


@router.message(StateFilter(User.phone))
async def get_phone_user(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ –≤ –ë–î
    :param message:
    :param state:
    :return:
    """
    logging.info(f'get_phone_user: {message.chat.id}')
    # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—Å—è"
    if message.contact:
        phone = str(message.contact.phone_number)
    # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    else:
        phone = message.text
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if not validate_russian_phone_number(phone):
            await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return
    # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(phone=phone)
    data = await state.get_data()
    item = data['item']
    # 1–≠–∫—Å–ø—Ä–µ—Å—Å -–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è -5000 —Ä—É–±–ª–µ–π
    # 2–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —Ä–∞–∑–±–æ—Ä–æ–º –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π -12500
    # 3–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ 3 –º–µ—Å—è—Ü–∞ -30000 —Ä—É–±–ª–µ–π
    # 4–í–ò–ü-–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é - 270000 —Ä—É–±–ª–µ–π
    # 5–í–µ–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –æ–Ω–ª–∞–π–Ω-–¥–µ—Ç–æ–∫—Å-10000 —Ä—É–±–ª–µ–π
    # 6–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ—Ö—É–¥–µ–Ω–∏—è –Ω–∞ 3 –º–µ—Å—è—Ü–∞ - 90000 —Ä—É–±–ª–µ–π
    # 7–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ—Ö—É–¥–µ–Ω–∏—è –Ω–∞ 1 –º–µ—Å—è—Ü -50000 —Ä—É–±–ª–µ–π
    # 8–ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ –≤—Ä–∞—á–µ–π -300000 —Ä—É–±–ª–µ–π
    type_product = {"1": "–≠–∫—Å–ø—Ä–µ—Å—Å -–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
                    "2": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —Ä–∞–∑–±–æ—Ä–æ–º –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π",
                    "3": "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
                    "4": "–í–ò–ü-–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é",
                    "5": "–í–µ–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –æ–Ω–ª–∞–π–Ω-–¥–µ—Ç–æ–∫—Å",
                    "6": "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ—Ö—É–¥–µ–Ω–∏—è –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
                    "7": "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ—Ö—É–¥–µ–Ω–∏—è –Ω–∞ 1 –º–µ—Å—è—Ü",
                    "8": "–ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ –≤—Ä–∞—á–µ–π"}
    item_amount = {"1": "5000", "2": "12500", "3": "30000", "4": "27000",
                   "5": "10000", "6": "90000", "7": "50000", "8": "300000"}
    amount = item_amount[item]
    content = type_product[item]
    await message.answer(text='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!',
                         reply_markup=kb.keyboard_main_menu())
    # payment_url, payment_id = create_payment(amount=amount, chat_id=message.chat.id, content=content)
    await message.answer(text=f'–û–ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç "{content}", –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª ‚¨áÔ∏è '
                              f'–¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
                         reply_markup=kb.keyboard_payment(payment_url="payment_url",
                                                          payment_id=0,
                                                          amount=amount))


@router.callback_query(F.data.startswith('payment_'))
async def check_pay(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'check_pay {callback.message.chat.id}')
    # payment_id = callback.data.split('_')[1]
    # result = check_payment(payment_id=payment_id)
    result = 'succeeded'
    if result == 'succeeded':
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
        await callback.answer(text='–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ', show_alert=True)
        data = await state.get_data()
        item = data['item']
        if item == '1':
            await callback.message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n'
                                               'üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.')
            await state.set_state(User.content)
            await state.update_data(content=[])
            await state.update_data(count=[])
        else:
            await set_calendar(message=callback.message, state=state)
    else:
        await callback.message.answer(text='–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª')
    await callback.answer()


@router.message(StateFilter(User.content), or_f(F.document, F.photo, F.video))
async def request_content_photo_text(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    :param message:
    :param state:
    :return:
    """
    logging.info(f'request_content_photo_text {message.chat.id}')
    await asyncio.sleep(random.random())
    data = await state.get_data()
    list_content = data.get('content', [])
    count = data.get('count', [])
    if message.text:
        await message.answer(text=f'üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.')
        return
    elif message.photo:
        content = message.photo[-1].file_id
        if message.caption:
            caption = message.caption
        else:
            caption = 'None'
        await state.update_data(caption=caption)

    elif message.video:
        content = message.video.file_id
        if message.caption:
            caption = message.caption
        else:
            caption = 'None'
        await state.update_data(caption=caption)

    elif message.document:
        content = message.document.file_id
        if message.caption:
            caption = message.caption
        else:
            caption = 'None'
        await state.update_data(caption=caption)

    list_content.append(content)
    count.append(content)
    await state.update_data(content=list_content)
    await state.update_data(count=count)
    await state.set_state(state=None)
    if len(count) == 1:
        await message.answer(text='–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?',
                             reply_markup=kb.keyboard_send())


@router.callback_query(F.data.endswith('content'))
async def send_add_content(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info(f'send_add_content {callback.message.chat.id}')
    answer = callback.data.split('_')[0]

    if answer == 'add':
        await state.set_state(User.content)
        await state.update_data(count=[])
        await callback.message.edit_text(text='–ü—Ä–∏—à–ª–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n'
                                              'üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.')
    else:
        await callback.message.edit_text(text='–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –≤–∞—Å –ø–µ—Ä–µ–¥–∞–Ω—ã\n\n'
                                              '–°–ø–∞—Å–∏–±–æ! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è',
                                         reply_markup=None)
        data = await state.get_data()
        content = data['content']
        print(content)
        for admin in config.tg_bot.admin_ids.split(','):
            try:
                # content_list = content.split(',')
                for item in content:
                    try:
                        await bot.send_photo(chat_id=admin,
                                             photo=item)
                    except:
                        try:
                            await bot.send_video(chat_id=admin,
                                                 video=item)
                        except:
                            await bot.send_document(chat_id=admin,
                                                    document=item)
                await bot.send_message(chat_id=admin,
                                       text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username}'
                                            f' {data["fullname"]} –ø—Ä–∏–æ–±—Ä–µ–ª "–≠–∫—Å–ø—Ä–µ—Å—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"\n'
                                            f'–§–ò–û: {data["fullname"]}\n'
                                            f'–¢–µ–ª–µ—Ñ–æ–Ω: {data["phone"]}')
            except:
                pass
    await callback.answer()


